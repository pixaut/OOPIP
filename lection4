1 класс - ios
Определяет основные типы и функции для работы с потоками ввода/вывода. В заголовке ios определены 3 класса для реализации задач ввода/вывода. ios_base , basic_ios, fpos.
ios_base описывает особенности ввода/вывода общих для входных и выходных потоков, которые не зависят от параметров шаблона.
basic_istream описывает объекты , управляющие извлечением элементов из буфера потока ввода. Зависит от параметров шаблона. По умолчанию классы наследуют private, в структурах- public, 
virtual при наследовании пишется, когда вы чувствуете, что наследуют от двух классов одновременно для избежания дублирования (ромбовидного наследования).
Задание домой - повторить виртуальное наследование, проблемы ромбовидного наследования, понять когда пишется virtual.
basic_ostream описывает объекты, которые управляют вставкой элементов в буфер потока вывода. Он тоже шаблонный, наследуется публично и виртуально от basic_ios. После template пишем   class, когда внутри шаблона может быть любой тип данных (какой тип указывается и как он используется). 
typedef*создаёт псевдоним* basic_istream <char> char_traits<char> istream*псевдоним*
basic_iostream предназначен для реализации ввода и вывода данных с извлечением из буфера и со вставкой данных в буфер. 
istream представляет собой реализацию шаблонного класса basic_istream для типа char и  char_traits , специализирующиеся на тире  char. 
outstream представляет собой реализацию basic_ostream , специализирующиеся для типа charс чертами символов по умолчанию. 
iostream наследуется ~одновременно~ от классов basic_istream и basic_ostream, предоставляет методы ввода в потока и вывода из потока, представляет реализацию шаблонного класса basic_iostream, который управляет вставками в поток и извлечением из потока. 
В одной программе может быть много потоков ввода и вывода, за которым надо следить. Компьютер всегда прав.
typedef basic_iostream<char, char_traits<char>> iostream;
template <class Elem, class Tr = char_traits<Elem>
class basic_iostream : public basic_istream<Elem, Tr>, 
public basic_ostream<Elem, Tr> 
{
public:
explicit basic_iostream(basic_streambuf<Elem, Tr>*
virtual ~basic_iostream();
Повторить зачем нужен виртуальный деструктор.
Повторить зачем нужен неявный (конструктор) explicit.
streambuf предназначен для получения буфера потока. 
Чтобы использовать средства ввода и вывода нужны объекты соответствующих классов. Например, объект cout является экземпляра класса ostream. 
Для того, чтобы с++ был интернациональным он должен обрабатывать наборы данных, которые содержат символы шириной 16 бит и более.

Аналогично типам, которые работают с типом char есть классы, которые работают с широкоформатными типами,т. е. wostrem, wistream, wiostream с wchar_t. 

typedef basic_ostream<wchar_t, char_traits<wchar_t> псевдоним. 

Объявление широкоформатных типов extern wostream wcount. extern(внешний) используется, когда объявляется переменная глобально, то она видна там, где она есть, extern не выделяет память,поэтому берется из другого файла, где была определа с extern.

Многие ОС поддерживают перенаправление потоков ввода/вывода. 
 Операция вывода в поток <<, операция ввода из потока >>. 
В языке С++ операция << может быть использована как операция вывода в поток и операция побитового сдвига влево, что определяется типом используемых операндов.
Класс ostream перегружает операцию << для вывода данных. Роль операции << определяется исходя из контекста.
Операция вывода в поток(вставки) в качестве левого аргумента имеет friend
